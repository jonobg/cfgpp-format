(* CFG++ Grammar Specification *)
(* Extended Backus-Naur Form (EBNF) *)

configuration = { statement } ;

statement = object_definition
          | constructor_definition
          | enum_definition
          | include_directive
          | comment ;

(* Object Definitions *)
object_definition = identifier "{" { object_member } "}" ;
object_member = assignment | nested_object ;
nested_object = identifier "=" object_constructor 
              | identifier "{" { object_member } "}" ;

(* Constructor-Style Definitions *)
constructor_definition = identifier "(" parameter_list ")" "{" { object_member } "}" ;
parameter_list = [ parameter { "," parameter } ] ;
parameter = type_annotation identifier [ "=" value ] ;
type_annotation = identifier [ "::" identifier ]* ;

(* Enum Definitions *)
enum_definition = "enum::" identifier "{" enum_body "}" ;
enum_body = enum_values [ "," enum_default ] ;
enum_values = "values" "=" array_value ;
enum_default = "default" "=" string_literal ;

(* Assignments *)
assignment = identifier "=" value [ "," ] ;

(* Values *)
value = primitive_value
      | array_value
      | object_constructor
      | environment_variable
      | namespaced_identifier ;

primitive_value = string_literal
                | number_literal
                | boolean_literal
                | null_literal ;

(* Object Constructors *)
object_constructor = namespaced_identifier "{" { assignment } "}" ;

(* Namespaced Identifiers *)
namespaced_identifier = identifier [ "::" identifier ]* ;

(* Literals *)
string_literal = '"' { character | escape_sequence } '"' ;
number_literal = integer_literal | float_literal ;
integer_literal = [ "-" ] digit { digit } ;
float_literal = [ "-" ] digit { digit } "." digit { digit } [ exponent ] ;
exponent = ( "e" | "E" ) [ "+" | "-" ] digit { digit } ;
boolean_literal = "true" | "false" ;
null_literal = "null" ;

(* Arrays *)
array_value = "[" [ value { "," value } [ "," ] ] "]" ;

(* Environment Variables *)
environment_variable = "${" identifier [ ":-" default_value ] "}" ;
default_value = string_literal | number_literal | boolean_literal ;

(* Directives *)
include_directive = "@include" string_literal ;

(* Comments *)
comment = single_line_comment | multi_line_comment ;
single_line_comment = "//" { character } newline ;
multi_line_comment = "/*" { character } "*/" ;

(* Identifiers *)
identifier = letter { letter | digit | "_" } ;

(* Basic Characters *)
letter = "A" | "B" | ... | "Z" | "a" | "b" | ... | "z" ;
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
character = ? any printable character ? ;
escape_sequence = "\" ( "n" | "r" | "t" | "\" | '"' | "u" hex_digit hex_digit hex_digit hex_digit ) ;
hex_digit = digit | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f" ;
newline = ? platform-specific newline character ? ;

(* Whitespace (ignored) *)
whitespace = " " | "\t" | "\r" | "\n" ;
