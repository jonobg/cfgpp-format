// Performance Baseline - Standard benchmark for 15-year-old hardware
// This provides a REALISTIC performance baseline for legacy systems! ‚è±Ô∏èüíªüìä

// === PERFORMANCE BASELINE CONFIGURATION ===
@config-hash: "sha256:b1a2s3e4l5i6n7e8901234567890123456789012345678901234567890123456"
@hash-algorithm: "sha256"
@generated-at: "2025-10-01T15:12:00Z"
@benchmark-target: "legacy-hardware"
@expected-parse-time-ms: 150
@expected-memory-mb: 32

// === LEGACY HARDWARE ASSUMPTIONS ===
LegacyHardware::baseline(
    // CPU specifications (circa 2008-2010)
    CPUSpecs cpu = CPUSpecs(
        string architecture = "x86_64",
        string model = "Intel Core 2 Duo E8400 / AMD Phenom II X2",
        float base-clock-ghz = 3.0,
        int cores = 2,
        int threads = 2,
        string cache-l2 = "6MB",
        int year = 2008
    ),
    
    // Memory specifications
    MemorySpecs memory = MemorySpecs(
        int total-ram-gb = 4,
        string memory-type = "DDR2-800 / DDR3-1066",
        int memory-bandwidth-gbps = 6,
        int available-for-parsing-mb = 512  // Conservative estimate
    ),
    
    // Storage specifications
    StorageSpecs storage = StorageSpecs(
        string storage-type = "7200 RPM HDD",
        int sequential-read-mbps = 80,
        int random-read-iops = 100,
        float seek-time-ms = 8.5,
        bool ssd-available = false
    ),
    
    // Operating system constraints
    OSConstraints os = OSConstraints(
        array[string] supported-os = ["Windows XP", "Windows 7", "Ubuntu 8.04", "CentOS 5"],
        bool modern-runtime = false,
        int max-process-memory-mb = 2048,
        bool 64bit-support = true
    )
)

// === PERFORMANCE BENCHMARK TESTS ===
PerformanceBenchmarks::legacy-tests(
    // Small configuration test (target: <50ms)
    SmallConfigTest small = SmallConfigTest(
        string test-name = "Small Configuration Parsing",
        int target-parse-time-ms = 50,
        int target-memory-mb = 16,
        
        TestConfig config = TestConfig(
            int total-lines = 100,
            int nested-levels = 3,
            int cross-references = 10,
            int string-fields = 25,
            int numeric-fields = 15,
            int boolean-fields = 10,
            int array-fields = 5,
            int object-fields = 8
        )
    ),
    
    // Medium configuration test (target: <200ms)
    MediumConfigTest medium = MediumConfigTest(
        string test-name = "Medium Configuration Parsing",
        int target-parse-time-ms = 200,
        int target-memory-mb = 48,
        
        TestConfig config = TestConfig(
            int total-lines = 500,
            int nested-levels = 6,
            int cross-references = 50,
            int string-fields = 125,
            int numeric-fields = 75,
            int boolean-fields = 50,
            int array-fields = 25,
            int object-fields = 40
        )
    ),
    
    // Large configuration test (target: <1000ms)
    LargeConfigTest large = LargeConfigTest(
        string test-name = "Large Configuration Parsing",
        int target-parse-time-ms = 1000,
        int target-memory-mb = 128,
        
        TestConfig config = TestConfig(
            int total-lines = 2000,
            int nested-levels = 10,
            int cross-references = 200,
            int string-fields = 500,
            int numeric-fields = 300,
            int boolean-fields = 200,
            int array-fields = 100,
            int object-fields = 150
        )
    ),
    
    // Cross-reference resolution test
    CrossReferenceTest cross-ref = CrossReferenceTest(
        string test-name = "Cross-Reference Resolution",
        int target-resolution-time-ms = 100,
        int target-memory-overhead-mb = 24,
        
        CrossRefConfig config = CrossRefConfig(
            int total-references = 100,
            int reference-depth = 5,
            int circular-reference-checks = 20,
            bool enable-caching = true,
            string resolution-strategy = "breadth-first"
        )
    ),
    
    // Memory stress test
    MemoryStressTest memory-stress = MemoryStressTest(
        string test-name = "Memory Usage Validation",
        int max-memory-mb = 256,  // Conservative limit for legacy systems
        int target-gc-frequency = 10,  // Garbage collection every 10 operations
        
        MemoryTestConfig config = MemoryTestConfig(
            int large-string-count = 50,
            int large-string-size-kb = 10,
            int object-creation-count = 1000,
            int array-allocation-count = 100,
            bool enable-memory-pooling = true
        )
    )
)

// === REALISTIC EXAMPLE CONFIGURATIONS ===
RealisticExamples::production-scenarios(
    // Typical microservice configuration
    MicroserviceConfig microservice = MicroserviceConfig(
        string service-name = "user-authentication-service",
        string version = "1.2.3",
        
        DatabaseConfig database = DatabaseConfig(
            string host = "localhost",
            int port = 5432,
            string database = "auth_db",
            string username = "${DB_USERNAME}",
            string password = "${DB_PASSWORD}",
            
            ConnectionPool pool = ConnectionPool(
                int min-connections = 5,
                int max-connections = 20,
                int connection-timeout-ms = 5000
            )
        ),
        
        CacheConfig cache = CacheConfig(
            string provider = "redis",
            string host = "localhost",
            int port = 6379,
            int ttl-seconds = 3600
        ),
        
        SecurityConfig security = SecurityConfig(
            JWTConfig jwt = JWTConfig(
                string algorithm = "HS256",
                int expiry-minutes = 15,
                string secret = "${JWT_SECRET}"
            ),
            
            RateLimitConfig rate-limit = RateLimitConfig(
                int requests-per-minute = 100,
                string strategy = "sliding-window"
            )
        ),
        
        LoggingConfig logging = LoggingConfig(
            string level = "info",
            string format = "json",
            array[string] destinations = ["stdout", "file"]
        )
    ),
    
    // IoT sensor network (moderate complexity)
    IoTSensorNetwork iot = IoTSensorNetwork(
        string network-name = "Building Automation System",
        int sensor-count = 50,
        
        array[SensorGroup] groups = [
            SensorGroup(
                string group-name = "HVAC Sensors",
                array[Sensor] sensors = [
                    Sensor(id = "TEMP-01", type = "temperature", location = "Zone-A"),
                    Sensor(id = "TEMP-02", type = "temperature", location = "Zone-B"),
                    Sensor(id = "HUM-01", type = "humidity", location = "Zone-A"),
                    Sensor(id = "HUM-02", type = "humidity", location = "Zone-B")
                ]
            ),
            SensorGroup(
                string group-name = "Security Sensors",
                array[Sensor] sensors = [
                    Sensor(id = "DOOR-01", type = "door-contact", location = "Main-Entrance"),
                    Sensor(id = "MOTION-01", type = "motion", location = "Lobby"),
                    Sensor(id = "MOTION-02", type = "motion", location = "Hallway")
                ]
            )
        ],
        
        CommunicationConfig communication = CommunicationConfig(
            string protocol = "MQTT",
            string broker-host = "192.168.1.100",
            int broker-port = 1883,
            int keepalive-seconds = 60
        )
    ),
    
    // Enterprise application configuration
    EnterpriseApp enterprise = EnterpriseApp(
        string app-name = "Customer Relationship Management",
        string environment = "production",
        
        LoadBalancerConfig load-balancer = LoadBalancerConfig(
            string algorithm = "round-robin",
            array[Server] servers = [
                Server(host = "app-server-1.company.com", port = 8080, weight = 100),
                Server(host = "app-server-2.company.com", port = 8080, weight = 100),
                Server(host = "app-server-3.company.com", port = 8080, weight = 100)
            ]
        ),
        
        MonitoringConfig monitoring = MonitoringConfig(
            bool enabled = true,
            string metrics-endpoint = "/metrics",
            int collection-interval-seconds = 30,
            
            array[Alert] alerts = [
                Alert(name = "high-cpu", threshold = 80, severity = "warning"),
                Alert(name = "high-memory", threshold = 90, severity = "critical"),
                Alert(name = "response-time", threshold = 2000, severity = "warning")
            ]
        )
    )
)

// === PERFORMANCE EXPECTATIONS ===
PerformanceExpectations::legacy-hardware(
    // Parsing performance targets
    ParsingTargets parsing = ParsingTargets(
        int small-config-ms = 50,      // <2KB configs
        int medium-config-ms = 200,    // 2-20KB configs  
        int large-config-ms = 1000,    // 20-100KB configs
        int massive-config-ms = 5000   // 100KB+ configs
    ),
    
    // Memory usage targets
    MemoryTargets memory = MemoryTargets(
        int base-overhead-mb = 8,      // Parser initialization
        int per-kb-overhead-mb = 1,    // Additional memory per KB of config
        int max-total-usage-mb = 256,  // Maximum memory for any single config
        int cross-ref-overhead-mb = 2  // Additional memory for cross-references
    ),
    
    // Validation performance
    ValidationTargets validation = ValidationTargets(
        int type-checking-ms = 10,     // Type validation overhead
        int cross-ref-resolution-ms = 50, // Cross-reference resolution
        int schema-validation-ms = 25,  // Schema validation overhead
        int hash-verification-ms = 5    // Hash validation overhead
    )
)

// === BENCHMARK RESULTS TEMPLATE ===
BenchmarkResults::template(
    TestEnvironment environment = TestEnvironment(
        string cpu-model = "Intel Core 2 Duo E8400",
        int ram-gb = 4,
        string storage-type = "7200 RPM HDD",
        string os = "Windows 7 SP1",
        string parser-version = "1.0.0"
    ),
    
    TestResults results = TestResults(
        ParseTimeResults parse-times = ParseTimeResults(
            int small-config-actual-ms = 0,    // To be filled by test
            int medium-config-actual-ms = 0,   // To be filled by test
            int large-config-actual-ms = 0,    // To be filled by test
            bool meets-targets = false         // To be calculated
        ),
        
        MemoryResults memory = MemoryResults(
            int peak-usage-mb = 0,             // To be filled by test
            int average-usage-mb = 0,          // To be filled by test
            bool within-limits = false         // To be calculated
        ),
        
        ValidationResults validation = ValidationResults(
            int cross-ref-time-ms = 0,         // To be filled by test
            int type-check-time-ms = 0,        // To be filled by test
            bool validation-passed = false     // To be calculated
        )
    )
)

/*
 * üìä PERFORMANCE BASELINE OBJECTIVES:
 * 
 * üéØ PARSING SPEED TARGETS:
 * - Small configs (<2KB): <50ms parse time
 * - Medium configs (2-20KB): <200ms parse time
 * - Large configs (20-100KB): <1000ms parse time
 * - Massive configs (100KB+): <5000ms parse time
 * 
 * üíæ MEMORY USAGE TARGETS:
 * - Base overhead: 8MB for parser initialization
 * - Scaling: +1MB per KB of configuration
 * - Maximum: 256MB for any single configuration
 * - Cross-references: +2MB overhead for resolution
 * 
 * ‚ö° VALIDATION PERFORMANCE:
 * - Type checking: <10ms overhead
 * - Cross-reference resolution: <50ms
 * - Schema validation: <25ms overhead
 * - Hash verification: <5ms overhead
 * 
 * üñ•Ô∏è LEGACY HARDWARE COMPATIBILITY:
 * - Intel Core 2 Duo / AMD Phenom II era (2008-2010)
 * - 4GB RAM with 512MB available for parsing
 * - 7200 RPM HDD storage (no SSD assumption)
 * - Windows XP/7 or Linux compatibility
 * 
 * üöÄ SUCCESS CRITERIA:
 * - Zero crashes on legacy hardware
 * - Graceful performance degradation
 * - Reasonable memory usage (<256MB)
 * - Consistent parsing results
 * - Error recovery without memory leaks
 * 
 * This baseline ensures CFGPP works reliably on
 * older systems while providing a foundation for
 * performance optimization and regression testing! üìà‚è±Ô∏è
 */
