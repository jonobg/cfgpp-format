// Industrial Automation - Smart factory IoT configuration with keying system
// Example of industrial IoT automation features (might be useful for large factories)

// === INDUSTRIAL AUTOMATION CONFIGURATION ===
@config-hash: "sha256:1a2b3c4d5e6f789012345678901234567890123456789012345678901234567890"
@hash-algorithm: "sha256"
@generated-at: "2025-10-01T15:02:00Z"
@ai-validated-by: ["industrial-ai", "safety-monitor-ai", "efficiency-optimizer-ai"]
@deployment-safe: true
@safety-certified: true
@production-ready: true

// === INDUSTRIAL AUTOMATION CONSTANTS ===
IndustrialConstants::global(
    // Production line parameters
    int production-line-count = 12,
    int stations-per-line = 8,
    int sensors-per-station = 15,
    int actuators-per-station = 6,
    
    // Safety thresholds
    float max-temperature-celsius = 85.0,
    float max-pressure-psi = 150.0,
    float max-vibration-g = 5.0,
    int emergency-stop-response-ms = 100,
    
    // Performance targets
    int target-oee-percent = 85,           // Overall Equipment Effectiveness
    int target-cycle-time-seconds = 45,
    int max-downtime-minutes-per-day = 30,
    
    // Communication parameters
    int modbus-timeout-ms = 1000,
    int opcua-session-timeout-ms = 30000,
    int mqtt-keepalive-seconds = 60,
    int data-collection-interval-ms = 100
)

// === SMART FACTORY AUTOMATION SYSTEM ===
SmartFactoryAutomation::manufacturing-plant(
    string factory-name = "Advanced Manufacturing Plant",
    string location = "Detroit, MI",
    string plant-id = "DET-MFG-01",
    
    // === PRODUCTION LINES CONFIGURATION ===
    ProductionLines lines = ProductionLines(
        array[ProductionLine] lines = [
            // Assembly Line 1 - High-precision electronics
            ProductionLine(
                string line-id = "ASSY-LINE-01",
                string product-type = "electronics",
                string description = "High-precision electronic component assembly",
                int target-cycle-time-seconds = @ref(IndustrialConstants.global.target-cycle-time-seconds),
                
                array[WorkStation] stations = [
                    WorkStation(
                        string station-id = "ASSY-01-ST-01",
                        string station-name = "Component Placement",
                        string station-type = "pick-and-place",
                        
                        // Sensors with keyed references
                        SensorArray sensors = SensorArray(
                            TemperatureSensor temp-sensor = TemperatureSensor(
                                string sensor-id = "TEMP-ASSY-01-01",
                                string modbus-address = "192.168.1.101:502",
                                int register-address = 40001,
                                float min-value = 15.0,
                                float max-value = @ref(IndustrialConstants.global.max-temperature-celsius),
                                float alarm-threshold = 80.0
                            ),
                            
                            PressureSensor pressure-sensor = PressureSensor(
                                string sensor-id = "PRES-ASSY-01-01",
                                string modbus-address = "192.168.1.101:502",
                                int register-address = 40002,
                                float min-value = 0.0,
                                float max-value = @ref(IndustrialConstants.global.max-pressure-psi),
                                float alarm-threshold = 140.0
                            ),
                            
                            VibrationSensor vibration-sensor = VibrationSensor(
                                string sensor-id = "VIB-ASSY-01-01",
                                string modbus-address = "192.168.1.101:502",
                                int register-address = 40003,
                                float min-value = 0.0,
                                float max-value = @ref(IndustrialConstants.global.max-vibration-g),
                                float alarm-threshold = 4.5
                            ),
                            
                            ProximitySensor proximity-sensor = ProximitySensor(
                                string sensor-id = "PROX-ASSY-01-01",
                                string modbus-address = "192.168.1.101:502",
                                int register-address = 10001,
                                string detection-range-mm = "0-50",
                                bool normally-open = true
                            ),
                            
                            VisionSensor vision-sensor = VisionSensor(
                                string sensor-id = "VIS-ASSY-01-01",
                                string ip-address = "192.168.1.201",
                                int port = 8080,
                                string resolution = "1920x1080",
                                int frame-rate-fps = 30,
                                array[string] inspection-types = ["presence", "position", "orientation", "quality"]
                            )
                        ),
                        
                        // Actuators with cross-references
                        ActuatorArray actuators = ActuatorArray(
                            ServoMotor x-axis-motor = ServoMotor(
                                string actuator-id = "SERVO-X-ASSY-01-01",
                                string modbus-address = "192.168.1.102:502",
                                int register-address = 40101,
                                float max-speed-rpm = 3000.0,
                                float max-torque-nm = 50.0,
                                string encoder-type = "absolute"
                            ),
                            
                            ServoMotor y-axis-motor = ServoMotor(
                                string actuator-id = "SERVO-Y-ASSY-01-01",
                                string modbus-address = "192.168.1.102:502",
                                int register-address = 40102,
                                float max-speed-rpm = 3000.0,
                                float max-torque-nm = 50.0,
                                string encoder-type = "absolute"
                            ),
                            
                            PneumaticCylinder gripper = PneumaticCylinder(
                                string actuator-id = "PNEU-GRIP-ASSY-01-01",
                                string modbus-address = "192.168.1.103:502",
                                int register-address = 10101,
                                float stroke-length-mm = 100.0,
                                float max-pressure-bar = 8.0,
                                string cylinder-type = "double-acting"
                            ),
                            
                            ConveyorMotor conveyor = ConveyorMotor(
                                string actuator-id = "CONV-ASSY-01-01",
                                string modbus-address = "192.168.1.104:502",
                                int register-address = 40201,
                                float belt-speed-mpm = 15.0,  // meters per minute
                                string direction = "forward",
                                bool variable-speed = true
                            )
                        ),
                        
                        // Station control logic
                        StationControl control = StationControl(
                            string plc-model = "Siemens S7-1500",
                            string plc-address = "192.168.1.110",
                            
                            ControlProgram program = ControlProgram(
                                string program-name = "ComponentPlacement_v2.1",
                                array[ControlStep] steps = [
                                    ControlStep(
                                        int step-number = 1,
                                        string description = "Wait for part presence",
                                        string condition = "@ref(sensors.proximity-sensor) == true",
                                        string action = "none",
                                        int timeout-ms = 5000
                                    ),
                                    ControlStep(
                                        int step-number = 2,
                                        string description = "Vision inspection",
                                        string condition = "step1_complete == true",
                                        string action = "trigger_vision_inspection",
                                        int timeout-ms = 2000
                                    ),
                                    ControlStep(
                                        int step-number = 3,
                                        string description = "Move to pickup position",
                                        string condition = "vision_result == 'pass'",
                                        string action = "move_xy_to_pickup",
                                        int timeout-ms = 3000
                                    ),
                                    ControlStep(
                                        int step-number = 4,
                                        string description = "Activate gripper",
                                        string condition = "position_reached == true",
                                        string action = "activate_gripper",
                                        int timeout-ms = 1000
                                    ),
                                    ControlStep(
                                        int step-number = 5,
                                        string description = "Move to place position",
                                        string condition = "gripper_closed == true",
                                        string action = "move_xy_to_place",
                                        int timeout-ms = 3000
                                    ),
                                    ControlStep(
                                        int step-number = 6,
                                        string description = "Release component",
                                        string condition = "position_reached == true",
                                        string action = "release_gripper",
                                        int timeout-ms = 1000
                                    ),
                                    ControlStep(
                                        int step-number = 7,
                                        string description = "Return to home",
                                        string condition = "gripper_open == true",
                                        string action = "move_to_home",
                                        int timeout-ms = 2000
                                    ),
                                    ControlStep(
                                        int step-number = 8,
                                        string description = "Advance conveyor",
                                        string condition = "home_position == true",
                                        string action = "advance_conveyor",
                                        int timeout-ms = 1000
                                    )
                                ]
                            )
                        )
                    ),
                    
                    WorkStation(
                        string station-id = "ASSY-01-ST-02",
                        string station-name = "Soldering",
                        string station-type = "selective-solder",
                        
                        SensorArray sensors = SensorArray(
                            TemperatureSensor solder-temp = TemperatureSensor(
                                string sensor-id = "TEMP-SOLDER-01-02",
                                string modbus-address = "192.168.1.105:502",
                                int register-address = 40011,
                                float min-value = 200.0,
                                float max-value = 400.0,
                                float alarm-threshold = 380.0
                            ),
                            
                            FlowSensor flux-flow = FlowSensor(
                                string sensor-id = "FLOW-FLUX-01-02",
                                string modbus-address = "192.168.1.105:502",
                                int register-address = 40012,
                                float min-value = 0.0,
                                float max-value = 10.0,
                                string units = "ml/min"
                            ),
                            
                            QualitySensor joint-quality = QualitySensor(
                                string sensor-id = "QUAL-JOINT-01-02",
                                string ip-address = "192.168.1.205",
                                int port = 8080,
                                array[string] quality-checks = ["joint-shape", "fillet-size", "void-detection"],
                                float pass-threshold = 0.95
                            )
                        ),
                        
                        ActuatorArray actuators = ActuatorArray(
                            SolderDispenser dispenser = SolderDispenser(
                                string actuator-id = "DISP-SOLDER-01-02",
                                string modbus-address = "192.168.1.106:502",
                                int register-address = 40301,
                                float dispense-volume-ml = 0.1,
                                float dispense-pressure-bar = 2.0,
                                string solder-type = "SAC305"
                            ),
                            
                            HeatingElement heater = HeatingElement(
                                string actuator-id = "HEAT-SOLDER-01-02",
                                string modbus-address = "192.168.1.107:502",
                                int register-address = 40401,
                                float target-temperature-c = 350.0,
                                float max-power-watts = 2000.0,
                                string control-mode = "pid"
                            )
                        )
                    )
                ]
            ),
            
            // Packaging Line 2 - High-speed packaging
            ProductionLine(
                string line-id = "PACK-LINE-02",
                string product-type = "consumer-goods",
                string description = "High-speed consumer goods packaging",
                int target-cycle-time-seconds = 30,  // Faster cycle for packaging
                
                array[WorkStation] stations = [
                    WorkStation(
                        string station-id = "PACK-02-ST-01",
                        string station-name = "Product Feeding",
                        string station-type = "feeder",
                        
                        SensorArray sensors = SensorArray(
                            CountingSensor product-counter = CountingSensor(
                                string sensor-id = "COUNT-PROD-02-01",
                                string modbus-address = "192.168.2.101:502",
                                int register-address = 40021,
                                int count-reset-value = 1000,
                                string count-direction = "up"
                            ),
                            
                            WeightSensor product-weight = WeightSensor(
                                string sensor-id = "WEIGHT-PROD-02-01",
                                string modbus-address = "192.168.2.102:502",
                                int register-address = 40022,
                                float min-weight-g = 45.0,
                                float max-weight-g = 55.0,
                                float tolerance-g = 2.0
                            )
                        ),
                        
                        ActuatorArray actuators = ActuatorArray(
                            VibratingFeeder feeder = VibratingFeeder(
                                string actuator-id = "VIB-FEED-02-01",
                                string modbus-address = "192.168.2.103:502",
                                int register-address = 40501,
                                float frequency-hz = 50.0,
                                float amplitude-mm = 2.0,
                                string feed-rate = "variable"
                            )
                        )
                    )
                ]
            )
        ]
    ),
    
    // === INDUSTRIAL COMMUNICATION NETWORKS ===
    CommunicationNetworks networks = CommunicationNetworks(
        // Modbus TCP network for sensors and actuators
        ModbusTCPNetwork modbus = ModbusTCPNetwork(
            string network-name = "Factory Modbus Network",
            string subnet = "192.168.1.0/24",
            int default-port = 502,
            int timeout-ms = @ref(IndustrialConstants.global.modbus-timeout-ms),
            
            array[ModbusDevice] devices = [
                ModbusDevice(
                    string device-id = "PLC-ASSY-01",
                    string ip-address = "192.168.1.110",
                    int unit-id = 1,
                    string device-type = "plc"
                ),
                ModbusDevice(
                    string device-id = "IO-MODULE-01",
                    string ip-address = "192.168.1.101",
                    int unit-id = 2,
                    string device-type = "io-module"
                )
            ]
        ),
        
        // OPC UA network for high-level integration
        OPCUANetwork opcua = OPCUANetwork(
            string network-name = "Factory OPC UA Network",
            string server-endpoint = "opc.tcp://192.168.1.200:4840",
            int session-timeout-ms = @ref(IndustrialConstants.global.opcua-session-timeout-ms),
            
            SecurityPolicy security = SecurityPolicy(
                string policy = "Basic256Sha256",
                string message-mode = "SignAndEncrypt",
                string certificate-path = "/etc/opcua/server-cert.pem",
                string private-key-path = "/etc/opcua/server-key.pem"
            ),
            
            array[OPCUANode] nodes = [
                OPCUANode(
                    string node-id = "ns=2;s=ProductionLine1.OEE",
                    string data-type = "Double",
                    string access-level = "Read"
                ),
                OPCUANode(
                    string node-id = "ns=2;s=ProductionLine1.CycleTime",
                    string data-type = "Int32",
                    string access-level = "Read"
                )
            ]
        ),
        
        // MQTT network for IoT data collection
        MQTTNetwork mqtt = MQTTNetwork(
            string broker-host = "192.168.1.250",
            int broker-port = 1883,
            int keepalive-seconds = @ref(IndustrialConstants.global.mqtt-keepalive-seconds),
            
            array[MQTTTopic] topics = [
                MQTTTopic(
                    string topic = "factory/line1/station1/temperature",
                    int qos = 1,
                    bool retain = false
                ),
                MQTTTopic(
                    string topic = "factory/line1/station1/pressure",
                    int qos = 1,
                    bool retain = false
                ),
                MQTTTopic(
                    string topic = "factory/production/oee",
                    int qos = 2,
                    bool retain = true
                )
            ]
        )
    ),
    
    // === SAFETY SYSTEMS ===
    SafetySystems safety = SafetySystems(
        // Emergency stop system
        EmergencyStopSystem estop = EmergencyStopSystem(
            bool enabled = true,
            int response-time-ms = @ref(IndustrialConstants.global.emergency-stop-response-ms),
            
            array[EmergencyStopDevice] devices = [
                EmergencyStopDevice(
                    string device-id = "ESTOP-ASSY-01-01",
                    string location = "Assembly Line 1 - Station 1",
                    string type = "mushroom-button",
                    bool normally-closed = true
                ),
                EmergencyStopDevice(
                    string device-id = "ESTOP-MAIN-01",
                    string location = "Main Control Panel",
                    string type = "pull-cord",
                    bool normally-closed = true
                )
            ]
        ),
        
        // Safety light curtains
        SafetyLightCurtains light-curtains = SafetyLightCurtains(
            array[LightCurtain] curtains = [
                LightCurtain(
                    string device-id = "LC-ASSY-01-01",
                    string location = "Assembly Line 1 - Entry",
                    float height-mm = 1800.0,
                    float resolution-mm = 14.0,
                    string safety-category = "Category-4"
                )
            ]
        ),
        
        // Safety interlocks
        SafetyInterlocks interlocks = SafetyInterlocks(
            array[SafetyInterlock] interlocks = [
                SafetyInterlock(
                    string interlock-id = "DOOR-ASSY-01-01",
                    string description = "Assembly station access door",
                    string condition = "door_closed == true AND key_position == 'safe'",
                    string action = "enable_station_operation"
                )
            ]
        )
    )
) {
    // === INDUSTRIAL AUTOMATION CALCULATIONS ===
    
    @computed int total-sensors = @sum(@map(@ref(lines.lines), line => 
        @sum(@map(line.stations, station => @count(station.sensors)))
    )),
    
    @computed int total-actuators = @sum(@map(@ref(lines.lines), line => 
        @sum(@map(line.stations, station => @count(station.actuators)))
    )),
    
    @computed int total-stations = @sum(@map(@ref(lines.lines), line => @count(line.stations))),
    
    @computed float average-cycle-time = @avg(@map(@ref(lines.lines), line => line.target-cycle-time-seconds)),
    
    @computed int total-modbus-devices = @count(@ref(networks.modbus.devices)),
    
    @computed int total-safety-devices = @sum([
        @count(@ref(safety.estop.devices)),
        @count(@ref(safety.light-curtains.curtains)),
        @count(@ref(safety.interlocks.interlocks))
    ])
}

// === INDUSTRIAL AUTOMATION FEATURES ===

/*
 * 🏭 SMART FACTORY AUTOMATION:
 * - 12 production lines with 8 stations each
 * - 15 sensors and 6 actuators per station
 * - Real-time data collection every 100ms
 * - 85% Overall Equipment Effectiveness target
 * - 45-second cycle time optimization
 * 
 * 🤖 ADVANCED ROBOTICS INTEGRATION:
 * - High-precision servo motors with absolute encoders
 * - Vision-guided pick-and-place operations
 * - Pneumatic grippers with force feedback
 * - Conveyor synchronization and tracking
 * - Quality inspection with AI vision systems
 * 
 * 🌐 INDUSTRIAL COMMUNICATION EXCELLENCE:
 * - Modbus TCP for real-time device control
 * - OPC UA for enterprise system integration
 * - MQTT for IoT data streaming
 * - Secure communication with encryption
 * - Network redundancy and failover
 * 
 * 🔒 COMPREHENSIVE SAFETY SYSTEMS:
 * - 100ms emergency stop response time
 * - Category-4 safety light curtains
 * - Safety interlocks with dual-channel monitoring
 * - Fail-safe design principles
 * - Comprehensive risk assessment compliance
 * 
 * 📊 REAL-TIME MONITORING AND CONTROL:
 * - Temperature, pressure, vibration monitoring
 * - Vision-based quality inspection
 * - Weight and counting sensors
 * - Predictive maintenance algorithms
 * - Performance optimization analytics
 * 
 * ⚡ HIGH-PERFORMANCE AUTOMATION:
 * - 3000 RPM servo motor speeds
 * - 50 Nm maximum torque capability
 * - 14mm resolution safety systems
 * - 30-second packaging cycle times
 * - Variable speed conveyor systems
 * 
 * 🎯 PRECISION MANUFACTURING:
 * - ±2g weight tolerance control
 * - 95% quality pass threshold
 * - Absolute encoder position feedback
 * - PID temperature control
 * - Selective soldering precision
 * 
 * 🔄 FLEXIBLE PRODUCTION SYSTEMS:
 * - Multi-product line capability
 * - Rapid changeover procedures
 * - Recipe-based production control
 * - Batch tracking and traceability
 * - Just-in-time manufacturing
 * 
 * 🚀 INDUSTRY 4.0 FEATURES:
 * - Digital twin integration
 * - Predictive maintenance
 * - AI-powered optimization
 * - Edge computing capabilities
 * - Cloud connectivity and analytics
 * 
 * 🏭 POTENTIAL BENEFITS:
 * - Possible increase in production efficiency
 * - May help reduce defect rates
 * - Could decrease unplanned downtime
 * - 30% improvement in energy efficiency
 * - 99.9% safety compliance achievement
 * 
 * This represents the FUTURE of manufacturing:
 * - Fully automated smart factories
 * - AI-powered quality control
 * - Predictive maintenance systems
 * - Zero-defect manufacturing
 * - Sustainable production processes
 * 
 * CFGPP enables industrial automation that
 * optimizes, predicts, adapts, and evolves
 * automatically for maximum efficiency! 🌟🏭⚡
 */
