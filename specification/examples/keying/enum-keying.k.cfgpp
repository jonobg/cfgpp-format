// Enum Keying - Restrictive enum cross-references with type-safe validation
// Demonstrates sophisticated enum-based cross-referencing with constraints and validation

// === ENVIRONMENT-AWARE ENUM DEFINITIONS ===

enum::Environment {
    values = ["development", "staging", "production"],
    default = "development"
}

enum::LogLevel {
    values = ["debug", "info", "warn", "error", "critical"],
    default = "info",
    
    // Environment-specific constraints
    constraints = {
        "development" = ["debug", "info", "warn"],      // Dev can use debug
        "staging" = ["info", "warn", "error"],          // Staging more restricted  
        "production" = ["warn", "error", "critical"]    // Prod only warnings/errors
    }
}

enum::DatabaseType {
    values = ["mysql", "postgresql", "sqlite", "mongodb"],
    default = "postgresql",
    
    // Environment-specific constraints
    constraints = {
        "development" = ["sqlite", "postgresql"],       // Dev uses lightweight DBs
        "staging" = ["postgresql", "mysql"],            // Staging mirrors prod options
        "production" = ["postgresql", "mysql", "mongodb"]  // Prod has all options
    }
}

enum::CacheStrategy {
    values = ["memory", "redis", "memcached", "hybrid"],
    default = "memory",
    
    // Environment and scale constraints
    constraints = {
        "development" = ["memory"],                     // Dev uses simple memory cache
        "staging" = ["memory", "redis"],               // Staging can use Redis
        "production" = ["redis", "memcached", "hybrid"]  // Prod needs distributed cache
    }
}

enum::SecurityLevel {
    values = ["basic", "standard", "enhanced", "maximum"],
    default = "standard",
    
    // Environment-based security requirements
    constraints = {
        "development" = ["basic", "standard"],          // Dev can be relaxed
        "staging" = ["standard", "enhanced"],           // Staging tests security
        "production" = ["enhanced", "maximum"]          // Prod requires high security
    }
}

enum::MonitoringLevel {
    values = ["minimal", "basic", "detailed", "comprehensive"],
    default = "basic",
    
    // Environment-based monitoring needs
    constraints = {
        "development" = ["minimal", "basic"],           // Dev needs less monitoring
        "staging" = ["basic", "detailed"],             // Staging tests monitoring
        "production" = ["detailed", "comprehensive"]   // Prod needs full monitoring
    }
}

// === SHARED CONFIGURATION WITH ENUM CONSTRAINTS ===

SharedConfig::global(
    Environment environment = "production",
    
    // These enums are constrained by the environment setting
    LogLevel default-log-level = @validate_enum_constraint(LogLevel, environment),
    DatabaseType default-database = @validate_enum_constraint(DatabaseType, environment),
    CacheStrategy default-cache = @validate_enum_constraint(CacheStrategy, environment),
    SecurityLevel security-level = @validate_enum_constraint(SecurityLevel, environment),
    MonitoringLevel monitoring-level = @validate_enum_constraint(MonitoringLevel, environment)
)

// === APPLICATION CONFIGURATION WITH ENUM CROSS-REFERENCES ===

ApplicationConfig::main(
    // Reference shared environment
    Environment environment = @ref(SharedConfig.global.environment),  // "production"
    
    // Database configuration with enum constraints
    DatabaseConfig database = DatabaseConfig(
        DatabaseType type = @ref(SharedConfig.global.default-database),  // Must be "postgresql", "mysql", or "mongodb" for production
        string host = @concat("db-", @lower(@ref(SharedConfig.global.default-database)), ".production.com"),  // "db-postgresql.production.com"
        int port = @switch(@ref(SharedConfig.global.default-database)) {
            "mysql" = 3306,
            "postgresql" = 5432,
            "mongodb" = 27017,
            default = 5432
        },
        
        // Log level constrained by environment
        LogLevel log-level = @validate_enum_constraint(LogLevel, @ref(SharedConfig.global.environment)),  // Must be "warn", "error", or "critical"
        
        ConnectionPool pool = ConnectionPool(
            int max-connections = @switch(@ref(SharedConfig.global.default-database)) {
                "sqlite" = 1,          // SQLite is single-threaded
                "mysql" = 100,
                "postgresql" = 200,
                "mongodb" = 150,
                default = 100
            }
        )
    ),
    
    // Cache configuration with enum constraints  
    CacheConfig cache = CacheConfig(
        CacheStrategy strategy = @ref(SharedConfig.global.default-cache),  // Must be "redis", "memcached", or "hybrid" for production
        string host = @concat("cache-", @lower(@ref(SharedConfig.global.default-cache)), ".production.com"),
        int port = @switch(@ref(SharedConfig.global.default-cache)) {
            "redis" = 6379,
            "memcached" = 11211,
            "hybrid" = 6379,  // Primary Redis port for hybrid
            default = 6379
        },
        
        // TTL based on cache strategy
        int default-ttl = @switch(@ref(SharedConfig.global.default-cache)) {
            "memory" = 300,        // 5 minutes for memory
            "redis" = 3600,        // 1 hour for Redis
            "memcached" = 1800,    // 30 minutes for Memcached
            "hybrid" = 7200,       // 2 hours for hybrid
            default = 3600
        }
    ),
    
    // Security configuration with enum constraints
    SecurityConfig security = SecurityConfig(
        SecurityLevel level = @ref(SharedConfig.global.security-level),  // Must be "enhanced" or "maximum" for production
        
        // JWT settings based on security level
        JWTConfig jwt = JWTConfig(
            string algorithm = @switch(@ref(SharedConfig.global.security-level)) {
                "basic" = "HS256",
                "standard" = "HS256", 
                "enhanced" = "RS256",
                "maximum" = "RS512",
                default = "HS256"
            },
            int expiry-minutes = @switch(@ref(SharedConfig.global.security-level)) {
                "basic" = 120,         // 2 hours
                "standard" = 60,       // 1 hour
                "enhanced" = 30,       // 30 minutes
                "maximum" = 15,        // 15 minutes
                default = 60
            }
        ),
        
        // Password policy based on security level
        PasswordPolicy password = PasswordPolicy(
            int min-length = @switch(@ref(SharedConfig.global.security-level)) {
                "basic" = 8,
                "standard" = 10,
                "enhanced" = 12,
                "maximum" = 16,
                default = 10
            },
            bool require-special-chars = @in(@ref(SharedConfig.global.security-level), ["enhanced", "maximum"]),
            bool require-numbers = @in(@ref(SharedConfig.global.security-level), ["standard", "enhanced", "maximum"]),
            bool require-mixed-case = @in(@ref(SharedConfig.global.security-level), ["enhanced", "maximum"])
        )
    ),
    
    // Monitoring configuration with enum constraints
    MonitoringConfig monitoring = MonitoringConfig(
        MonitoringLevel level = @ref(SharedConfig.global.monitoring-level),  // Must be "detailed" or "comprehensive" for production
        
        // Metrics collection based on monitoring level
        MetricsConfig metrics = MetricsConfig(
            int collection-interval = @switch(@ref(SharedConfig.global.monitoring-level)) {
                "minimal" = 300,       // 5 minutes
                "basic" = 60,          // 1 minute
                "detailed" = 30,       // 30 seconds
                "comprehensive" = 10,  // 10 seconds
                default = 60
            },
            bool enable-histograms = @in(@ref(SharedConfig.global.monitoring-level), ["detailed", "comprehensive"]),
            bool enable-traces = @eq(@ref(SharedConfig.global.monitoring-level), "comprehensive")
        ),
        
        // Logging based on environment and monitoring level
        LoggingConfig logging = LoggingConfig(
            LogLevel level = @validate_enum_constraint(LogLevel, @ref(SharedConfig.global.environment)),
            string format = @switch(@ref(SharedConfig.global.monitoring-level)) {
                "minimal" = "text",
                "basic" = "text",
                "detailed" = "json",
                "comprehensive" = "structured",
                default = "json"
            },
            bool enable-sampling = @in(@ref(SharedConfig.global.monitoring-level), ["basic", "detailed", "comprehensive"])
        )
    )
)

// === SERVICE-SPECIFIC CONFIGURATIONS WITH ENUM INHERITANCE ===

WebServiceConfig::frontend(
    // Inherit environment from application config
    Environment environment = @ref(ApplicationConfig.main.environment),
    
    // Override log level for web service (can be more verbose)
    LogLevel log-level = @validate_enum_constraint_with_override(LogLevel, environment, {
        "production" = ["info", "warn", "error", "critical"]  // Allow info logs for web service in production
    }),
    
    // Cache strategy must be compatible with main application
    CacheStrategy cache-strategy = @ref(ApplicationConfig.main.cache.strategy),
    
    // Security level must match or exceed application level
    SecurityLevel security-level = @validate_minimum_security_level(@ref(ApplicationConfig.main.security.level)),
    
    // Monitoring can be more detailed than application default
    MonitoringLevel monitoring-level = @validate_minimum_monitoring_level(@ref(ApplicationConfig.main.monitoring.level))
)

ApiServiceConfig::backend(
    // Inherit environment from application config
    Environment environment = @ref(ApplicationConfig.main.environment),
    
    // API service typically needs more detailed logging
    LogLevel log-level = @validate_enum_constraint_with_override(LogLevel, environment, {
        "production" = ["debug", "info", "warn", "error", "critical"]  // API service can use debug in production for troubleshooting
    }),
    
    // Database type must match application
    DatabaseType database-type = @ref(ApplicationConfig.main.database.type),
    
    // Security level must match application (APIs are critical)
    SecurityLevel security-level = @ref(ApplicationConfig.main.security.level),
    
    // Monitoring must be comprehensive for APIs
    MonitoringLevel monitoring-level = @validate_minimum_monitoring_level("detailed")
)

// === ENVIRONMENT-SPECIFIC OVERRIDES WITH ENUM VALIDATION ===

DevelopmentOverrides::dev-config(
    @when(@ref(SharedConfig.global.environment) == "development") {
        // Development can override some constraints
        LogLevel override-log-level = "debug",  // Always allow debug in development
        DatabaseType override-database = "sqlite",  // Use SQLite for development
        CacheStrategy override-cache = "memory",  // Use memory cache for development
        SecurityLevel override-security = "basic",  // Relaxed security for development
        MonitoringLevel override-monitoring = "minimal"  // Minimal monitoring for development
    }
)

StagingOverrides::staging-config(
    @when(@ref(SharedConfig.global.environment) == "staging") {
        // Staging should mirror production constraints but allow some flexibility
        LogLevel override-log-level = @validate_enum_constraint_with_override(LogLevel, "staging", {
            "staging" = ["debug", "info", "warn", "error"]  // Allow debug in staging for testing
        }),
        DatabaseType override-database = @ref(ApplicationConfig.main.database.type),  // Must match production DB
        CacheStrategy override-cache = "redis",  // Use Redis to test production-like caching
        SecurityLevel override-security = "enhanced",  // Test enhanced security
        MonitoringLevel override-monitoring = "detailed"  // Detailed monitoring for testing
    }
)

// === ENUM CONSTRAINT VALIDATION RULES ===

EnumValidationRules::constraints(
    // Validate that all enum values respect environment constraints
    @validate_all_enum_constraints {
        // Log level constraints
        @validate(@ref(ApplicationConfig.main.database.log-level) @in @enum_constraint(LogLevel, @ref(SharedConfig.global.environment))),
        @validate(@ref(WebServiceConfig.frontend.log-level) @in @enum_constraint_with_override(LogLevel, @ref(SharedConfig.global.environment))),
        
        // Database type constraints  
        @validate(@ref(ApplicationConfig.main.database.type) @in @enum_constraint(DatabaseType, @ref(SharedConfig.global.environment))),
        @validate(@ref(ApiServiceConfig.backend.database-type) @in @enum_constraint(DatabaseType, @ref(SharedConfig.global.environment))),
        
        // Cache strategy constraints
        @validate(@ref(ApplicationConfig.main.cache.strategy) @in @enum_constraint(CacheStrategy, @ref(SharedConfig.global.environment))),
        @validate(@ref(WebServiceConfig.frontend.cache-strategy) @in @enum_constraint(CacheStrategy, @ref(SharedConfig.global.environment))),
        
        // Security level constraints
        @validate(@ref(ApplicationConfig.main.security.level) @in @enum_constraint(SecurityLevel, @ref(SharedConfig.global.environment))),
        @validate(@ref(WebServiceConfig.frontend.security-level) @gte @ref(ApplicationConfig.main.security.level)),
        @validate(@ref(ApiServiceConfig.backend.security-level) @gte @ref(ApplicationConfig.main.security.level)),
        
        // Monitoring level constraints
        @validate(@ref(ApplicationConfig.main.monitoring.level) @in @enum_constraint(MonitoringLevel, @ref(SharedConfig.global.environment))),
        @validate(@ref(WebServiceConfig.frontend.monitoring-level) @gte @ref(ApplicationConfig.main.monitoring.level)),
        @validate(@ref(ApiServiceConfig.backend.monitoring-level) @gte "detailed")
    }
)

// === ENUM KEYING BENEFITS DEMONSTRATED ===

/*
 * TYPE-SAFE CROSS-REFERENCING:
 * - Enum values validated at parse time
 * - Environment-specific constraints enforced
 * - Invalid combinations rejected automatically
 * - Consistent enum usage across configurations
 * 
 * ENVIRONMENT-AWARE VALIDATION:
 * - Development: Relaxed constraints for flexibility
 * - Staging: Production-like with testing allowances  
 * - Production: Strict constraints for security/stability
 * - Automatic constraint switching based on environment
 * 
 * HIERARCHICAL ENUM INHERITANCE:
 * - Services inherit base configuration enums
 * - Override capabilities with validation
 * - Minimum level enforcement (security, monitoring)
 * - Consistent constraint propagation
 * 
 * COMPUTED ENUM-BASED VALUES:
 * - Port numbers based on database type
 * - Host names derived from enum values
 * - TTL settings computed from cache strategy
 * - Security settings derived from security level
 * 
 * VALIDATION & SAFETY:
 * - Cross-enum constraint validation
 * - Environment compatibility checking
 * - Minimum level enforcement
 * - Invalid combination prevention
 * 
 * AI REASONING ADVANTAGES:
 * - Understand enum relationships and constraints
 * - Validate configuration compatibility
 * - Suggest valid enum combinations
 * - Optimize settings based on environment
 * - Predict impact of enum changes
 * 
 * MAINTENANCE BENEFITS:
 * - Change environment, update all constraints
 * - Add new enum values with automatic validation
 * - Centralized constraint management
 * - Reduced configuration errors
 * 
 * PERFORMANCE CHARACTERISTICS:
 * - O(1) enum constraint lookup
 * - Cached validation results
 * - Minimal memory overhead
 * - Fast constraint checking
 */
