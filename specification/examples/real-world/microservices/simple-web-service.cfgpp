// Simple Web Service - Clean, parseable microservice configuration
// This demonstrates PRODUCTION-READY web service configuration! üåê‚ú®

// === SIMPLE WEB SERVICE CONFIGURATION ===
SimpleWebService::user-service(
    string service-name = "user-service",
    string version = "1.0.0",
    string environment = "production",
    
    // === SERVER CONFIGURATION ===
    ServerConfig server = ServerConfig(
        string host = "0.0.0.0",
        int port = 8080,
        int max-connections = 1000,
        int timeout-seconds = 30
    ),
    
    // === DATABASE CONFIGURATION ===
    DatabaseConfig database = DatabaseConfig(
        string driver = "postgresql",
        string host = "localhost",
        int port = 5432,
        string database = "users_db",
        string username = "${DB_USERNAME}",
        string password = "${DB_PASSWORD}",
        
        ConnectionPool pool = ConnectionPool(
            int min-connections = 5,
            int max-connections = 20,
            int idle-timeout-seconds = 300
        )
    ),
    
    // === LOGGING CONFIGURATION ===
    LoggingConfig logging = LoggingConfig(
        string level = "info",
        string format = "json",
        bool console-output = true,
        string log-file = "/var/log/user-service.log"
    ),
    
    // === SECURITY CONFIGURATION ===
    SecurityConfig security = SecurityConfig(
        JWTConfig jwt = JWTConfig(
            string algorithm = "HS256",
            int expiry-minutes = 15,
            string secret = "${JWT_SECRET}"
        ),
        
        CORSConfig cors = CORSConfig(
            bool enabled = true,
            array[string] allowed-origins = ["https://app.example.com"],
            array[string] allowed-methods = ["GET", "POST", "PUT", "DELETE"]
        )
    ),
    
    // === HEALTH CHECK CONFIGURATION ===
    HealthCheckConfig health = HealthCheckConfig(
        string endpoint = "/health",
        int interval-seconds = 30,
        int timeout-seconds = 5,
        
        array[HealthCheck] checks = [
            HealthCheck(name = "database", type = "database"),
            HealthCheck(name = "memory", type = "memory"),
            HealthCheck(name = "disk", type = "disk")
        ]
    )
)

/*
 * üåê SIMPLE WEB SERVICE FEATURES:
 * - Clean, readable configuration structure
 * - Standard microservice components
 * - Environment variable support
 * - Connection pooling for database
 * - JWT authentication
 * - CORS configuration
 * - Health check endpoints
 * - JSON logging format
 * 
 * ‚úÖ GUARANTEED TO PARSE:
 * - Uses only basic CFGPP syntax
 * - No complex cross-references
 * - No advanced AI features
 * - Standard data types only
 * - Reasonable configuration size
 * 
 * üéØ PRODUCTION READY:
 * - Real-world microservice pattern
 * - Security best practices
 * - Monitoring and health checks
 * - Environment-specific configuration
 * - Database connection management
 */
