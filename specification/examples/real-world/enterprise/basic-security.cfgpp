// Basic Security - Simple enterprise security configuration
// This demonstrates CLEAN enterprise security setup! üîêüè¢

// === BASIC ENTERPRISE SECURITY ===
BasicSecurity::corporate-policy(
    string policy-name = "Basic Corporate Security Policy",
    string version = "1.0.0",
    string effective-date = "2025-01-01",
    
    // === USER AUTHENTICATION ===
    AuthenticationConfig authentication = AuthenticationConfig(
        PasswordPolicy password = PasswordPolicy(
            int min-length = 8,
            int max-age-days = 90,
            bool require-uppercase = true,
            bool require-lowercase = true,
            bool require-numbers = true,
            bool require-special-chars = true,
            int lockout-attempts = 5,
            int lockout-duration-minutes = 30
        ),
        
        SessionConfig session = SessionConfig(
            int timeout-minutes = 30,
            int max-concurrent-sessions = 3,
            bool require-reauth-sensitive = true
        )
    ),
    
    // === ACCESS CONTROL ===
    AccessControlConfig access = AccessControlConfig(
        array[Role] roles = [
            Role(
                string name = "admin",
                string description = "System administrator",
                array[string] permissions = [
                    "user:read", "user:write", "user:delete",
                    "system:read", "system:write", "audit:read"
                ]
            ),
            Role(
                string name = "manager",
                string description = "Department manager",
                array[string] permissions = [
                    "user:read", "user:write", "report:read", "report:write"
                ]
            ),
            Role(
                string name = "employee",
                string description = "Standard employee",
                array[string] permissions = [
                    "profile:read", "profile:write", "dashboard:read"
                ]
            )
        ]
    ),
    
    // === NETWORK SECURITY ===
    NetworkSecurityConfig network = NetworkSecurityConfig(
        FirewallConfig firewall = FirewallConfig(
            bool enabled = true,
            string default-action = "deny",
            
            array[FirewallRule] rules = [
                FirewallRule(
                    string name = "allow-web-traffic",
                    string protocol = "tcp",
                    int port = 443,
                    string source = "any",
                    string action = "allow"
                ),
                FirewallRule(
                    string name = "allow-ssh-admin",
                    string protocol = "tcp", 
                    int port = 22,
                    string source = "192.168.1.0/24",
                    string action = "allow"
                )
            ]
        ),
        
        VPNConfig vpn = VPNConfig(
            bool enabled = true,
            string protocol = "OpenVPN",
            string server-address = "vpn.company.com",
            int server-port = 1194,
            string encryption = "AES-256"
        )
    ),
    
    // === DATA PROTECTION ===
    DataProtectionConfig data = DataProtectionConfig(
        EncryptionConfig encryption = EncryptionConfig(
            bool encrypt-at-rest = true,
            bool encrypt-in-transit = true,
            string algorithm = "AES-256",
            int key-rotation-days = 90
        ),
        
        BackupConfig backup = BackupConfig(
            bool enabled = true,
            string schedule = "0 1 * * *",  // Daily at 1 AM
            int retention-days = 30,
            bool encrypt-backups = true,
            string backup-location = "/secure/backups"
        ),
        
        array[DataClassification] classifications = [
            DataClassification(
                string level = "public",
                string description = "Information that can be freely shared",
                bool encryption-required = false
            ),
            DataClassification(
                string level = "internal",
                string description = "Information for internal use only",
                bool encryption-required = true
            ),
            DataClassification(
                string level = "confidential",
                string description = "Sensitive business information",
                bool encryption-required = true
            )
        ]
    ),
    
    // === MONITORING AND AUDIT ===
    MonitoringConfig monitoring = MonitoringConfig(
        LoggingConfig logging = LoggingConfig(
            bool enabled = true,
            string log-level = "info",
            int retention-days = 365,  // 1 year retention
            
            array[LogEvent] events = [
                LogEvent(type = "login", severity = "info"),
                LogEvent(type = "logout", severity = "info"),
                LogEvent(type = "failed-login", severity = "warning"),
                LogEvent(type = "privilege-escalation", severity = "critical"),
                LogEvent(type = "data-access", severity = "info"),
                LogEvent(type = "configuration-change", severity = "warning")
            ]
        ),
        
        AlertConfig alerts = AlertConfig(
            bool enabled = true,
            
            array[AlertRule] rules = [
                AlertRule(
                    string name = "multiple-failed-logins",
                    string condition = "failed_login_count > 3 in 5 minutes",
                    string severity = "warning",
                    bool email-notification = true
                ),
                AlertRule(
                    string name = "admin-access-after-hours",
                    string condition = "admin_login AND time > '18:00'",
                    string severity = "info",
                    bool email-notification = true
                ),
                AlertRule(
                    string name = "configuration-changes",
                    string condition = "config_change == true",
                    string severity = "warning",
                    bool email-notification = true
                )
            ]
        )
    ),
    
    // === COMPLIANCE ===
    ComplianceConfig compliance = ComplianceConfig(
        array[ComplianceFramework] frameworks = [
            ComplianceFramework(
                string name = "ISO-27001",
                string description = "Information Security Management",
                bool enabled = true,
                string certification-date = "2024-06-01",
                string next-audit-date = "2025-06-01"
            )
        ],
        
        PolicyConfig policies = PolicyConfig(
            int review-frequency-months = 12,
            string policy-owner = "security@company.com",
            bool employee-training-required = true,
            int training-frequency-months = 6
        )
    )
)

/*
 * üîê BASIC SECURITY FEATURES:
 * - Password policy with complexity requirements
 * - Role-based access control (3 roles)
 * - Basic firewall configuration
 * - VPN access for remote workers
 * - Data encryption at rest and in transit
 * - Security event logging and alerting
 * - ISO-27001 compliance framework
 * 
 * ‚úÖ CLEAN AND MANAGEABLE:
 * - Simple security policy structure
 * - Standard enterprise security practices
 * - No complex cross-references
 * - Reasonable configuration size
 * - Guaranteed parser compatibility
 * 
 * üè¢ PRODUCTION APPLICABLE:
 * - Real-world security requirements
 * - Practical policy settings
 * - Standard compliance frameworks
 * - Scalable security architecture
 * - Employee training integration
 */
